using System;
using System.IO;
using System.Threading.Tasks;
using Shouldly;
using SpocR.SpocRVNext.GoldenHash;
using Xunit;

namespace SpocR.Tests.SpocRVNext.GoldenHash;

public class GoldenHashCommandsTests
{
    [Fact]
    public void Write_And_Verify_Should_Match()
    {
        var root = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString("N"));
        Directory.CreateDirectory(root);
        // create sample structure mimicking vNext output
        var sampleDir = Path.Combine(root, "samples", "restapi", "Samples");
        Directory.CreateDirectory(sampleDir);
        File.WriteAllText(Path.Combine(sampleDir, "UserList.cs"), "// <auto-generated/>\npublic class Demo { }\n");
        var write = GoldenHashCommands.WriteGolden(root);
        write.ExitCode.ShouldBe(0);
        write.Message.ShouldContain("manifest written");
        var verify = GoldenHashCommands.VerifyGolden(root);
        verify.ExitCode.ShouldBe(0);
        verify.Message.ShouldContain("match hash");
    }

    [Fact]
    public void Verify_Should_Diff_After_Modification_Relaxed()
    {
        var root = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString("N"));
        Directory.CreateDirectory(root);
        var sampleDir = Path.Combine(root, "samples", "restapi", "Samples");
        Directory.CreateDirectory(sampleDir);
        var filePath = Path.Combine(sampleDir, "UserList.cs");
        File.WriteAllText(filePath, "// <auto-generated/>\npublic class Demo { int X=1; }\n");
        GoldenHashCommands.WriteGolden(root);
        // mutate file
        File.AppendAllText(filePath, "// change\n");
        var verify = GoldenHashCommands.VerifyGolden(root);
        verify.Message.ShouldContain("DIFF");
        verify.ExitCode.ShouldBe(0); // relaxed
    }

    [Fact]
    public void Verify_Should_Return_Strict_ExitCode_When_Env_Set()
    {
        var root = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString("N"));
        Directory.CreateDirectory(root);
        var sampleDir = Path.Combine(root, "samples", "restapi", "Samples");
        Directory.CreateDirectory(sampleDir);
        var filePath = Path.Combine(sampleDir, "UserList.cs");
        File.WriteAllText(filePath, "// <auto-generated/>\npublic class Demo { int X=2; }\n");
        GoldenHashCommands.WriteGolden(root);
        File.AppendAllText(filePath, "// change-strict\n");
        // enable strict
        Environment.SetEnvironmentVariable("SPOCR_STRICT_DIFF", "1");
        try
        {
            var verify = GoldenHashCommands.VerifyGolden(root);
            verify.ExitCode.ShouldBe(21);
            verify.Message.ShouldContain("[strict]");
        }
        finally
        {
            Environment.SetEnvironmentVariable("SPOCR_STRICT_DIFF", null);
        }
    }
}
