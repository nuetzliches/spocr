using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using SpocR.SpocRVNext.Engine;
using SpocR.SpocRVNext.Generators;
using SpocR.SpocRVNext.Metadata;
using SpocR.SpocRVNext.Configuration;
using Xunit;

namespace SpocR.Tests;

public class BuildSchemasFilteringTests
{
    private sealed class FakeTemplateLoader : ITemplateLoader
    {
        public bool TryLoad(string name, out string template)
        {
            template = name switch
            {
                "UnifiedProcedure" => "{{ HEADER }}namespace {{ Namespace }};\npublic record {{ ProcedureTypeName }}();",
                "_Header" => "// <auto-generated/>\n",
                _ => string.Empty
            };
            return !string.IsNullOrEmpty(template);
        }
        public IEnumerable<string> ListNames() => new[] { "UnifiedProcedure", "_Header" };
    }

    [Fact]
    public void Allows_Only_Listed_Schema_Procedures()
    {
        // Arrange: two procedures in different schemas
        var descriptors = new List<ProcedureDescriptor>
        {
            new("ProcA","Alpha","Alpha.ProcA", Array.Empty<FieldDescriptor>(), Array.Empty<FieldDescriptor>(), Array.Empty<ResultSetDescriptor>()),
            new("ProcB","Beta","Beta.ProcB", Array.Empty<FieldDescriptor>(), Array.Empty<FieldDescriptor>(), Array.Empty<ResultSetDescriptor>())
        };
        var cfg = new EnvConfiguration { GeneratorMode = "next", BuildSchemas = new [] { "Alpha" } };
        var renderer = new SimpleTemplateEngine();
        var loader = new FakeTemplateLoader();
        using var tempDir = new TempDir();
        var gen = new ProceduresGenerator(renderer, () => descriptors, loader, tempDir.Path, cfg);

        // Act
        var written = gen.Generate("Test.Root.SpocR", tempDir.Path);

        // Assert: only Alpha schema directory present
        var alphaDir = Path.Combine(tempDir.Path, "Alpha");
        var betaDir = Path.Combine(tempDir.Path, "Beta");
        Assert.True(Directory.Exists(alphaDir), "Alpha directory should exist");
        Assert.False(Directory.Exists(betaDir), "Beta directory should have been filtered out by BuildSchemas allow-list");
        Assert.Equal(1, written);
    }

    private sealed class TempDir : IDisposable
    {
        public string Path { get; } = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "spocr_test_" + Guid.NewGuid().ToString("N"));
        public TempDir() { Directory.CreateDirectory(Path); }
        public void Dispose() { try { Directory.Delete(Path, true); } catch { } }
    }
}