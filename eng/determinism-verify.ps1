<#
.SYNOPSIS
  Verifies deterministic generator output hashes (Golden Manifest) for sample.
.DESCRIPTION
  Computes SHA256 hashes under a target output directory and compares with a golden JSON manifest.
  Non-matching, missing, or new files cause a non-zero exit. Intended for CI determinism gate.
.PARAMETER Root
  Root folder containing generated output (default: samples/restapi/SpocR).
.PARAMETER Golden
  Path to golden manifest JSON (default: samples/restapi/SpocR/golden-output-hash.json).
.PARAMETER WriteGolden
  If set, writes (overwrites) the golden file instead of verifying.
.PARAMETER FailOnNew
  Treat new files as failure (default true when verifying).
.PARAMETER FailOnMissing
  Treat missing files as failure (default true when verifying).
.PARAMETER IgnorePatterns
  Optional glob-like fragments (simple -contains match) to ignore when hashing.
#>
param(
  [string]$Root = 'samples/restapi/SpocR',
  [string]$Golden = 'samples/restapi/SpocR/golden-output-hash.json',
  [switch]$WriteGolden,
  [switch]$FailOnNew = $true,
  [switch]$FailOnMissing = $true,
  [string[]]$IgnorePatterns = @('Generated at','<auto-generated/>')
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

function Info($m){ Write-Host "[det] $m" -ForegroundColor Cyan }
function Fail($m){ Write-Host "[FAIL] $m" -ForegroundColor Red; exit 21 }
function Ok($m){ Write-Host "[OK] $m" -ForegroundColor Green }

if (-not (Test-Path $Root)) { Fail "Root '$Root' not found" }

function Get-RelativeFiles([string]$r){
  Get-ChildItem -Path $r -Recurse -File | ForEach-Object {
    $full = $_.FullName
    $rel = ($full -replace [regex]::Escape((Resolve-Path $r)), '').TrimStart('\\','/')
    [PSCustomObject]@{ Rel=$rel; Full=$full }
  }
}

function Normalize-Content([string]$path){
  $lines = Get-Content -Raw -Path $path -Encoding UTF8 -ErrorAction Stop -TotalCount 10000 -ReadCount 0 | Out-String | Select-String '.*' -AllMatches | ForEach-Object { $_.ToString() }
  if ($IgnorePatterns -and $IgnorePatterns.Length -gt 0){
    $lines = $lines | Where-Object { lineMatches $_ } # will override below function
  }
  return ($lines -join "`n")
}

# Simple substring ignore (not full glob): exclude lines containing any IgnorePatterns
function lineMatches([string]$line){
  foreach($pat in $IgnorePatterns){ if ($line -like "*$pat*") { return $false } }
  return $true
}

function Compute-Hashes(){
  $map = @{}
  $files = Get-RelativeFiles $Root
  foreach($f in $files){
    $content = Get-Content -Path $f.Full -Raw -Encoding UTF8
    $norm = $content -split "`n" | Where-Object { lineMatches $_ } | Out-String
    $bytes = [System.Text.Encoding]::UTF8.GetBytes($norm)
    $sha = [System.Security.Cryptography.SHA256]::Create()
    $hash = ($sha.ComputeHash($bytes) | ForEach-Object { $_.ToString('x2') }) -join ''
    $map[$f.Rel] = $hash
  }
  return $map
}

$hashes = Compute-Hashes

if ($WriteGolden){
  $json = ($hashes.GetEnumerator() | Sort-Object Name | ForEach-Object { $_ }) | ConvertTo-Json -Depth 5
  $dir = Split-Path $Golden -Parent
  if (-not (Test-Path $dir)) { New-Item -ItemType Directory -Path $dir | Out-Null }
  Set-Content -Path $Golden -Value $json -Encoding UTF8
  Ok "Golden file written: $Golden"
  exit 0
}

if (-not (Test-Path $Golden)) { Fail "Golden file '$Golden' missing (run with -WriteGolden first)" }
$expected = Get-Content -Raw -Path $Golden | ConvertFrom-Json

$diffs = @()
# Compare expected -> current
foreach($prop in $expected.PSObject.Properties){
  $name = $prop.Name
  $val = $prop.Value.ToString().ToLowerInvariant()
  if (-not $hashes.ContainsKey($name)) { if ($FailOnMissing){ $diffs += "MISSING: $name" } else { Info "Missing (ignored): $name" } ; continue }
  if ($hashes[$name] -ne $val) { $diffs += "HASH: $name" }
}
# New files
foreach($k in $hashes.Keys){
  if (-not ($expected.PSObject.Properties.Name -contains $k)){
    if ($FailOnNew){ $diffs += "NEW: $k" } else { Info "New (ignored): $k" }
  }
}

if ($diffs.Count -gt 0){
  Write-Host "Diffs:" -ForegroundColor Yellow
  $diffs | ForEach-Object { Write-Host "  $_" -ForegroundColor Yellow }
  Fail "Determinism verification failed ($($diffs.Count) differences)"
}

Ok "Determinism verification passed"
exit 0
