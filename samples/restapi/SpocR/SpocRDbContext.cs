/// <summary>Auto-generated by SpocR. DO NOT EDIT. Changes will be overwritten on rebuild.</summary>
/// <remarks>Generated at 2025-10-14 14:39:27Z</remarks>
// <auto-generated/>
// SpocR v4.5 Bridge Phase (vNext generator). This file is generated; do not edit directly.
// Customize via additional partial classes or extension templates.
#nullable enable
namespace RestApi.SpocR;

using System;
using System.Data.Common;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Data.SqlClient;

/// <summary>Generated database context providing ADO.NET connection helpers and health probe.</summary>
public sealed partial class SpocRDbContext : ISpocRDbContext
{
    private readonly SpocRDbContextOptions _options;

    public SpocRDbContext(SpocRDbContextOptions options)
    {
        _options = options ?? throw new ArgumentNullException(nameof(options));
        if (string.IsNullOrWhiteSpace(_options.ConnectionString))
            throw new InvalidOperationException("SpocRDbContextOptions.ConnectionString must be set.");
        if (_options.CommandTimeoutSeconds == null || _options.CommandTimeoutSeconds < 1)
            _options.CommandTimeoutSeconds = 30;
    }

    /// <inheritdoc />
    public int CommandTimeoutSeconds => _options.CommandTimeoutSeconds ?? 30;

    /// <inheritdoc />
    public DbConnection OpenConnection()
    {
        var conn = new SqlConnection(_options.ConnectionString);
        conn.Open();
        return conn;
    }

    /// <inheritdoc />
    public async Task<DbConnection> OpenConnectionAsync(CancellationToken cancellationToken = default)
    {
        var conn = new SqlConnection(_options.ConnectionString);
        await conn.OpenAsync(cancellationToken).ConfigureAwait(false);
        return conn;
    }

    /// <inheritdoc />
    public async Task<bool> HealthCheckAsync(CancellationToken cancellationToken = default)
    {
        try
        {
            await using var conn = new SqlConnection(_options.ConnectionString);
            await conn.OpenAsync(cancellationToken).ConfigureAwait(false);
            return true;
        }
        catch
        {
            return false;
        }
    }
}
