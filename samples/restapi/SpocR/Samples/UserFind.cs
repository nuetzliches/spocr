// <auto-generated/>
// SpocR v4.5 Bridge Phase (vNext generator). Do not edit this file directly.
// Changes may be overwritten. For customization extend generated partials.

#nullable enable
namespace RestApi.SpocR.Samples;

using RestApi.SpocR;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

public readonly record struct UserFindInput(
    int? UserId
);

public sealed class UserFindResult
{
	public bool Success { get; init; }
	public string? Error { get; init; }
	
}

internal static partial class UserFindPlan
{
	private static ProcedureExecutionPlan? _cached;
	public static ProcedureExecutionPlan Instance => _cached ??= Create();
	private static ProcedureExecutionPlan Create()
	{

	var parameters = new ProcedureParameter[]
	{
            new("@UserId", System.Data.DbType.Int32, null, false, true),
        };

	var resultSets = Array.Empty<ResultSetMapping>();

		object? OutputFactory(IReadOnlyDictionary<string, object?> values) => null;
		object AggregateFactory(bool success, string? error, object? output, IReadOnlyDictionary<string, object?> outputs, object[] rs)
		{
			return new UserFindResult
			{
				Success = success,
				Error = error
			};
		};
		void Binder(DbCommand cmd, object? state)
		{
            var input = (UserFindInput)state!;
            cmd.Parameters["@UserId"].Value = input.UserId;

		}
		return new ProcedureExecutionPlan(
			"[samples].[UserFind]", parameters, resultSets, OutputFactory, AggregateFactory, Binder);
	}
}

/// <summary>Convenience extension for executing '[samples].[UserFind]' via an <see cref="ISpocRDbContext"/>.</summary>
public static class UserFindExtensions
{
	public static async Task<UserFindResult> UserFindAsync(this ISpocRDbContext db, UserFindInput input, CancellationToken cancellationToken = default)
	{
		await using var conn = await db.OpenConnectionAsync(cancellationToken).ConfigureAwait(false);
		return await UserFindProcedure.ExecuteAsync(conn, input, cancellationToken).ConfigureAwait(false);
	}
}

/// <summary>Low-level execution wrapper for a single stored procedure invocation.</summary>
public static class UserFindProcedure
{
	public const string Name = "[samples].[UserFind]";
	public static Task<UserFindResult> ExecuteAsync(DbConnection connection, UserFindInput input, CancellationToken cancellationToken = default)
	{
		return ProcedureExecutor.ExecuteAsync<UserFindResult>(connection, UserFindPlan.Instance, input, cancellationToken);
	}
}
