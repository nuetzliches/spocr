// <auto-generated/>
// SpocR v4.5 Bridge Phase (vNext generator). Do not edit this file directly.
// Changes may be overwritten. For customization extend generated partials.

#nullable enable
namespace RestApi.SpocR.Samples;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Data.Common;
using System.Threading;
using System.Threading.Tasks;
using RestApi.SpocR;

public readonly record struct UserOrderHierarchyJsonResultSet1Result(
    string UserId,
    string DisplayName,
    string Email,
    string Orders
);

public readonly record struct UserOrderHierarchyJsonResultSet2Result(
    string OrderId,
    string TotalAmount,
    string PlacedAt,
    string Notes
);

public sealed class UserOrderHierarchyJsonResult
{
	public bool Success { get; init; }
	public string? Error { get; init; }
	public IReadOnlyList<UserOrderHierarchyJsonResultSet1Result> Result1 { get; init; } = Array.Empty<UserOrderHierarchyJsonResultSet1Result>();
	public IReadOnlyList<UserOrderHierarchyJsonResultSet2Result> Result2 { get; init; } = Array.Empty<UserOrderHierarchyJsonResultSet2Result>();
	
}

internal static partial class UserOrderHierarchyJsonPlan
{
    private static ProcedureExecutionPlan? _cached;
    public static ProcedureExecutionPlan Instance => _cached ??= Create();
    private static ProcedureExecutionPlan Create()
    {
	var parameters = new ProcedureParameter[] {
        };

	var resultSets = new ResultSetMapping[] {
            new("ResultSet1", async (r, ct) => { var list = new List<object>(); int o0=r.GetOrdinal("UserId"); int o1=r.GetOrdinal("DisplayName"); int o2=r.GetOrdinal("Email"); int o3=r.GetOrdinal("Orders"); while (await r.ReadAsync(ct).ConfigureAwait(false)) { list.Add(new UserOrderHierarchyJsonResultSet1Result(r.IsDBNull(o0) ? string.Empty : r.GetString(o0), r.IsDBNull(o1) ? string.Empty : r.GetString(o1), r.IsDBNull(o2) ? string.Empty : r.GetString(o2), r.IsDBNull(o3) ? string.Empty : r.GetString(o3))); } return list; }),
            new("ResultSet2", async (r, ct) => { var list = new List<object>(); int o0=r.GetOrdinal("OrderId"); int o1=r.GetOrdinal("TotalAmount"); int o2=r.GetOrdinal("PlacedAt"); int o3=r.GetOrdinal("Notes"); while (await r.ReadAsync(ct).ConfigureAwait(false)) { list.Add(new UserOrderHierarchyJsonResultSet2Result(r.IsDBNull(o0) ? string.Empty : r.GetString(o0), r.IsDBNull(o1) ? string.Empty : r.GetString(o1), r.IsDBNull(o2) ? string.Empty : r.GetString(o2), r.IsDBNull(o3) ? string.Empty : r.GetString(o3))); } return list; }),
        };

	object? OutputFactory(IReadOnlyDictionary<string, object?> values) => null;
	object AggregateFactory(bool success, string? error, object? output, IReadOnlyDictionary<string, object?> outputs, object[] rs) => new UserOrderHierarchyJsonResult { Success = success, Error = error, Result1 = rs.Length > 0 ? Array.ConvertAll(((System.Collections.Generic.List<object>)rs[0]).ToArray(), o => (UserOrderHierarchyJsonResultSet1Result)o).ToList() : Array.Empty<UserOrderHierarchyJsonResultSet1Result>(), Result2 = rs.Length > 1 ? Array.ConvertAll(((System.Collections.Generic.List<object>)rs[1]).ToArray(), o => (UserOrderHierarchyJsonResultSet2Result)o).ToList() : Array.Empty<UserOrderHierarchyJsonResultSet2Result>() };
	void Binder(DbCommand cmd, object? state) {
	
	}
	return new ProcedureExecutionPlan(
	    "samples.UserOrderHierarchyJson", parameters, resultSets, OutputFactory, AggregateFactory, Binder);
    }
}

public static class UserOrderHierarchyJsonProcedure
{
	public const string Name = "samples.UserOrderHierarchyJson";
	public static Task<UserOrderHierarchyJsonResult> ExecuteAsync(DbConnection connection, CancellationToken cancellationToken = default)
	{
		return ProcedureExecutor.ExecuteAsync<UserOrderHierarchyJsonResult>(connection, UserOrderHierarchyJsonPlan.Instance, null, cancellationToken);
	}
}

/// <summary>Convenience extension for executing 'samples.UserOrderHierarchyJson' via an <see cref="ISpocRDbContext"/>.</summary>
public static class UserOrderHierarchyJsonExtensions
{
	public static async Task<UserOrderHierarchyJsonResult> UserOrderHierarchyJsonAsync(this ISpocRDbContext db, CancellationToken cancellationToken = default)
	{
		await using var conn = await db.OpenConnectionAsync(cancellationToken).ConfigureAwait(false);
		return await UserOrderHierarchyJsonProcedure.ExecuteAsync(conn, cancellationToken).ConfigureAwait(false);
	}
}
