// <auto-generated/>
// SpocR v4.5 Bridge Phase (vNext generator). Do not edit this file directly.
// Changes may be overwritten. For customization extend generated partials.

#nullable enable
namespace TestNs.SpocR.Samples;

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using TestNs.SpocR;

public readonly record struct UserContactSyncInput(
    UserContactTableType Contacts
);

public sealed class UserContactSyncResult
{
	public bool Success { get; init; }
	public string? Error { get; init; }
	
}

internal static partial class UserContactSyncPlan
{
	private static ProcedureExecutionPlan? _cached;
	public static ProcedureExecutionPlan Instance => _cached ??= Create();
	private static ProcedureExecutionPlan Create()
	{

	var parameters = new ProcedureParameter[]
	{
            new("@Contacts", System.Data.DbType.Object, null, false, false),
        };

	var resultSets = Array.Empty<ResultSetMapping>();

		object? OutputFactory(IReadOnlyDictionary<string, object?> values) => null;
		object AggregateFactory(bool success, string? error, object? output, IReadOnlyDictionary<string, object?> outputs, object[] rs)
		{
			return new UserContactSyncResult
			{
				Success = success,
				Error = error
			};
		};
		void Binder(DbCommand cmd, object? state)
		{
            var input = (UserContactSyncInput)state!;
            { var prm = cmd.Parameters["@Contacts"]; prm.Value = TvpHelper.BuildRecords(input.Contacts) ?? (object)DBNull.Value; if (prm is Microsoft.Data.SqlClient.SqlParameter sp) sp.SqlDbType = System.Data.SqlDbType.Structured; }

		}
		return new ProcedureExecutionPlan(
			"[samples].[UserContactSync]", parameters, resultSets, OutputFactory, AggregateFactory, Binder);
	}
}

/// <summary>Convenience extension for executing '[samples].[UserContactSync]' via an <see cref="ISpocRDbContext"/>.</summary>
public static class UserContactSyncExtensions
{
	public static async Task<UserContactSyncResult> UserContactSyncAsync(this ISpocRDbContext db, UserContactSyncInput input, CancellationToken cancellationToken = default)
	{
		await using var conn = await db.OpenConnectionAsync(cancellationToken).ConfigureAwait(false);
		return await UserContactSyncProcedure.ExecuteAsync(conn, input, cancellationToken).ConfigureAwait(false);
	}
}

/// <summary>Low-level execution wrapper for a single stored procedure invocation.</summary>
public static class UserContactSyncProcedure
{
	public const string Name = "[samples].[UserContactSync]";
	public static Task<UserContactSyncResult> ExecuteAsync(DbConnection connection, UserContactSyncInput input, CancellationToken cancellationToken = default)
	{
		return ProcedureExecutor.ExecuteAsync<UserContactSyncResult>(connection, UserContactSyncPlan.Instance, input, cancellationToken);
	}
}
