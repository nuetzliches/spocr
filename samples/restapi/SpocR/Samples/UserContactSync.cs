// <auto-generated/>
// SpocR v4.5 Bridge Phase (vNext generator). Do not edit this file directly.
// Changes may be overwritten. For customization extend generated partials.

#nullable enable
namespace RestApi.SpocR.Samples;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Data.Common;
using System.Threading;
using System.Threading.Tasks;
using RestApi.SpocR;

public readonly record struct UserContactSyncInput(
    string Contacts
);

public readonly record struct UserContactSyncResultSet1Result(
    int? UpdatedContacts,
    int? MissingContacts
);

public sealed class UserContactSyncResult
{
	public bool Success { get; init; }
	public string? Error { get; init; }
	public IReadOnlyList<UserContactSyncResultSet1Result> Result1 { get; init; } = Array.Empty<UserContactSyncResultSet1Result>();
	
}

internal static partial class UserContactSyncPlan
{
    private static ProcedureExecutionPlan? _cached;
    public static ProcedureExecutionPlan Instance => _cached ??= Create();
    private static ProcedureExecutionPlan Create()
    {
	var parameters = new ProcedureParameter[] {
            new("@Contacts", System.Data.DbType.String, null, false, false),
        };

	var resultSets = new ResultSetMapping[] {
            new("ResultSet1", async (r, ct) => { var list = new List<object>(); int o0=r.GetOrdinal("UpdatedContacts"); int o1=r.GetOrdinal("MissingContacts"); while (await r.ReadAsync(ct).ConfigureAwait(false)) { list.Add(new UserContactSyncResultSet1Result(r.IsDBNull(o0) ? null : (int?)r.GetInt32(o0), r.IsDBNull(o1) ? null : (int?)r.GetInt32(o1))); } return list; }),
        };

	object? OutputFactory(IReadOnlyDictionary<string, object?> values) => null;
	object AggregateFactory(bool success, string? error, object? output, IReadOnlyDictionary<string, object?> outputs, object[] rs) => new UserContactSyncResult { Success = success, Error = error, Result1 = rs.Length > 0 ? Array.ConvertAll(((System.Collections.Generic.List<object>)rs[0]).ToArray(), o => (UserContactSyncResultSet1Result)o).ToList() : Array.Empty<UserContactSyncResultSet1Result>() };
	void Binder(DbCommand cmd, object? state) {
	var input = (UserContactSyncInput)state!;
        cmd.Parameters["@Contacts"].Value = input.Contacts;

	}
	return new ProcedureExecutionPlan(
	    "samples.UserContactSync", parameters, resultSets, OutputFactory, AggregateFactory, Binder);
    }
}

/// <summary>Convenience extension for executing 'samples.UserContactSync' via an <see cref="ISpocRDbContext"/>.</summary>
public static class UserContactSyncExtensions
{
	public static async Task<UserContactSyncResult> UserContactSyncAsync(this ISpocRDbContext db, UserContactSyncInput input, CancellationToken cancellationToken = default)
	{
		await using var conn = await db.OpenConnectionAsync(cancellationToken).ConfigureAwait(false);
		return await UserContactSyncProcedure.ExecuteAsync(conn, input, cancellationToken).ConfigureAwait(false);
	}
}

/// <summary>Low-level execution wrapper for a single stored procedure invocation.</summary>
public static class UserContactSyncProcedure
{
	public const string Name = "samples.UserContactSync";
	public static Task<UserContactSyncResult> ExecuteAsync(DbConnection connection, UserContactSyncInput input, CancellationToken cancellationToken = default)
	{
		return ProcedureExecutor.ExecuteAsync<UserContactSyncResult>(connection, UserContactSyncPlan.Instance, input, cancellationToken);
	}
}
