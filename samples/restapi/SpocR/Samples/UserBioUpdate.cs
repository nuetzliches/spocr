// <auto-generated/>
// SpocR v4.5 Bridge Phase (vNext generator). Do not edit this file directly.
// Changes may be overwritten. For customization extend generated partials.

#nullable enable
namespace RestApi.SpocR.Samples;

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Threading;
using System.Threading.Tasks;
using RestApi.SpocR;

public readonly record struct UserBioUpdateInput(
    int? UserId,
    string Bio
);



public readonly record struct UserBioUpdateResultSet1Result(
    int UserId,
    string Bio
);

public sealed class UserBioUpdateResult
{
    public bool Success { get; init; }
    public string? Error { get; init; }
    public IReadOnlyList<UserBioUpdateResultSet1Result> Result1 { get; init; } = Array.Empty<UserBioUpdateResultSet1Result>();
}

internal static partial class UserBioUpdateProcedurePlan
{
    private static ProcedureExecutionPlan? _cached;
    public static ProcedureExecutionPlan Instance => _cached ??= Create();
    private static ProcedureExecutionPlan Create()
    {
        var parameters = new ProcedureParameter[] {
            new("@UserId", System.Data.DbType.Int32, 4, false, true),
            new("@Bio", System.Data.DbType.String, 512, false, true),
        };

        var resultSets = new ResultSetMapping[] {
            new("ResultSet1", async (r, ct) => { var list = new List<object>(); int o0=r.GetOrdinal("UserId"); int o1=r.GetOrdinal("Bio"); while (await r.ReadAsync(ct).ConfigureAwait(false)) { list.Add(new UserBioUpdateResultSet1Result(r.GetInt32(o0), r.IsDBNull(o1) ? string.Empty : r.GetString(o1))); } return list; }),
        };

        object? OutputFactory(IReadOnlyDictionary<string, object?> values) => null;
        object AggregateFactory(bool success, string? error, object? output, IReadOnlyDictionary<string, object?> outputs, object[] rs) => new UserBioUpdateResult { Success = success, Error = error, Result1 = rs.Length > 0 ? Array.ConvertAll(((System.Collections.Generic.List<object>)rs[0]).ToArray(), o => (UserBioUpdateResultSet1Result)o).ToList() : Array.Empty<UserBioUpdateResultSet1Result>() };
        void Binder(DbCommand cmd, object? state) { var input = (UserBioUpdateInput)state!; 
            cmd.Parameters["@UserId"].Value = input.UserId;
            cmd.Parameters["@Bio"].Value = input.Bio;
        }
        return new ProcedureExecutionPlan(
            "samples.UserBioUpdate", parameters, resultSets, OutputFactory, AggregateFactory, Binder);
    }
}

public static class UserBioUpdateProcedure
{
    public const string Name = "samples.UserBioUpdate";
    public static Task<UserBioUpdateResult> ExecuteAsync(DbConnection connection, UserBioUpdateInput input, CancellationToken cancellationToken = default)
    {
        return ProcedureExecutor.ExecuteAsync<UserBioUpdateResult>(connection, UserBioUpdateProcedurePlan.Instance, input, cancellationToken);
    }
}
