// <auto-generated/>
// SpocR v4.5 Bridge Phase (vNext generator). Do not edit this file directly.
// Changes may be overwritten. For customization extend generated partials.

#nullable enable
namespace RestApi.SpocR.Samples;

using RestApi.SpocR;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

public readonly record struct UserBioUpdateInput(
    int? UserId,
    string Bio
);

public readonly record struct UserBioUpdateResult(
    int UserId,
    string Bio
);

public sealed class UserBioUpdateAggregate
{
	public bool Success { get; init; }
	public string? Error { get; init; }
	public IReadOnlyList<UserBioUpdateResult> Result { get; init; } = Array.Empty<UserBioUpdateResult>();
	
}

internal static partial class UserBioUpdatePlan
{
	private static ProcedureExecutionPlan? _cached;
	public static ProcedureExecutionPlan Instance => _cached ??= Create();
	private static ProcedureExecutionPlan Create()
	{

	var parameters = new ProcedureParameter[]
	{
            new("@UserId", System.Data.DbType.Int32, 4, false, true),
            new("@Bio", System.Data.DbType.String, 512, false, true),
        };

	var resultSets = new ResultSetMapping[]
	{
            new("ResultSet1", async (r, ct) =>
    {
		var list = new System.Collections.Generic.List<object>(); int o0=ReaderUtil.TryGetOrdinal(r, "UserId"); int o1=ReaderUtil.TryGetOrdinal(r, "Bio"); while (await r.ReadAsync(ct).ConfigureAwait(false)) { list.Add(new UserBioUpdateResult(o0 < 0 ? default(int) : r.GetInt32(o0), o1 < 0 ? string.Empty : (r.IsDBNull(o1) ? string.Empty : r.GetString(o1)))); } return list;
    }),

        };

		object? OutputFactory(IReadOnlyDictionary<string, object?> values) => null;
		object AggregateFactory(bool success, string? error, object? output, IReadOnlyDictionary<string, object?> outputs, object[] rs)
		{
			return new UserBioUpdateAggregate
			{
				Success = success,
				Error = error,
				// ResultSet 0 â†’ Result (robust list/array handling)
				Result = rs.Length > 0 && rs[0] is object[] rows0 ? Array.ConvertAll(rows0, o => (UserBioUpdateResult)o).ToList() : (rs.Length > 0 && rs[0] is System.Collections.Generic.List<object> list0 ? Array.ConvertAll(list0.ToArray(), o => (UserBioUpdateResult)o).ToList() : Array.Empty<UserBioUpdateResult>())
			};
		};
		void Binder(DbCommand cmd, object? state)
		{
            var input = (UserBioUpdateInput)state!;
            cmd.Parameters["@UserId"].Value = input.UserId;
            cmd.Parameters["@Bio"].Value = input.Bio;

		}
		return new ProcedureExecutionPlan(
			"[samples].[UserBioUpdate]", parameters, resultSets, OutputFactory, AggregateFactory, Binder);
	}
}

/// <summary>Convenience extension for executing '[samples].[UserBioUpdate]' via an <see cref="ISpocRDbContext"/>.</summary>
public static class UserBioUpdateExtensions
{
	public static async Task<UserBioUpdateAggregate> UserBioUpdateAsync(this ISpocRDbContext db, UserBioUpdateInput input, CancellationToken cancellationToken = default)
	{
		await using var conn = await db.OpenConnectionAsync(cancellationToken).ConfigureAwait(false);
		return await UserBioUpdateProcedure.ExecuteAsync(conn, input, cancellationToken).ConfigureAwait(false);
	}
}

/// <summary>Low-level execution wrapper for a single stored procedure invocation.</summary>
public static class UserBioUpdateProcedure
{
	public const string Name = "[samples].[UserBioUpdate]";
	public static Task<UserBioUpdateAggregate> ExecuteAsync(DbConnection connection, UserBioUpdateInput input, CancellationToken cancellationToken = default)
	{
		return ProcedureExecutor.ExecuteAsync<UserBioUpdateAggregate>(connection, UserBioUpdatePlan.Instance, input, cancellationToken);
	}
}
