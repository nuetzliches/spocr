// <auto-generated/>
// SpocR v4.5 Bridge Phase (vNext generator). Do not edit this file directly.
// Changes may be overwritten. For customization extend generated partials.

#nullable enable
namespace RestApi.SpocR.Samples;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;
using System.Data.Common;
using System.Threading;
using System.Threading.Tasks;
using RestApi.SpocR;

public readonly record struct UserListResultSet(
    int UserId,
    string Email,
    string DisplayName,
    DateTime CreatedAt,
    string Bio
);

public sealed class UserListResult
{
	public bool Success { get; init; }
	public string? Error { get; init; }
	public IReadOnlyList<UserListResultSet> Result { get; init; } = Array.Empty<UserListResultSet>();
	
}

internal static partial class UserListPlan
{
	private static ProcedureExecutionPlan? _cached;
	public static ProcedureExecutionPlan Instance => _cached ??= Create();
	private static ProcedureExecutionPlan Create()
	{

	var parameters = Array.Empty<ProcedureParameter>();

	var resultSets = new ResultSetMapping[]
	{
            new("ResultSet1", async (r, ct) =>
	    {
		var list = new List<object>();
int o0=r.GetOrdinal("UserId"); int o1=r.GetOrdinal("Email"); int o2=r.GetOrdinal("DisplayName"); int o3=r.GetOrdinal("CreatedAt"); int o4=r.GetOrdinal("Bio");
		while (await r.ReadAsync(ct).ConfigureAwait(false))
		{
		    list.Add(new UserListResultSet(r.GetInt32(o0), r.IsDBNull(o1) ? string.Empty : r.GetString(o1), r.IsDBNull(o2) ? string.Empty : r.GetString(o2), r.GetDateTime(o3), r.IsDBNull(o4) ? string.Empty : r.GetString(o4)));
		}
		return list;
	    }),

        };

		object? OutputFactory(IReadOnlyDictionary<string, object?> values) => null;
		object AggregateFactory(bool success, string? error, object? output, IReadOnlyDictionary<string, object?> outputs, object[] rs)
		{
			return new UserListResult
			{
				Success = success,
				Error = error,
				// ResultSet 0 â†’ Result (robust list/array handling)
				Result = rs.Length > 0 && rs[0] is object[] rows0 ? Array.ConvertAll(rows0, o => (UserListResultSet)o).ToList() : (rs.Length > 0 && rs[0] is System.Collections.Generic.List<object> list0 ? Array.ConvertAll(list0.ToArray(), o => (UserListResultSet)o).ToList() : Array.Empty<UserListResultSet>())
			};
		};
		void Binder(DbCommand cmd, object? state)
		{

		}
		return new ProcedureExecutionPlan(
			"samples.UserList", parameters, resultSets, OutputFactory, AggregateFactory, Binder);
	}
}

/// <summary>Convenience extension for executing 'samples.UserList' via an <see cref="ISpocRDbContext"/>.</summary>
public static class UserListExtensions
{
	public static async Task<UserListResult> UserListAsync(this ISpocRDbContext db, CancellationToken cancellationToken = default)
	{
		await using var conn = await db.OpenConnectionAsync(cancellationToken).ConfigureAwait(false);
		return await UserListProcedure.ExecuteAsync(conn, cancellationToken).ConfigureAwait(false);
	}
}

/// <summary>Low-level execution wrapper for a single stored procedure invocation.</summary>
public static class UserListProcedure
{
	public const string Name = "samples.UserList";
	public static Task<UserListResult> ExecuteAsync(DbConnection connection, CancellationToken cancellationToken = default)
	{
		return ProcedureExecutor.ExecuteAsync<UserListResult>(connection, UserListPlan.Instance, null, cancellationToken);
	}
}
