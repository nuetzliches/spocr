// <auto-generated/>
// SpocR v4.5 Bridge Phase (vNext generator). Do not edit this file directly.
// Changes may be overwritten. For customization extend generated partials.

#nullable enable
namespace RestApi.SpocR.Samples;

using RestApi.SpocR;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

public readonly record struct UserDetailsWithOrdersInput(
    int? UserId
);

public readonly record struct UserDetailsWithOrdersResultSet1Result(
    int UserId,
    string DisplayName,
    string Email,
    DateTime CreatedAt,
    string Bio
);

public readonly record struct UserDetailsWithOrdersResultSet2Result(
    int OrderId,
    decimal TotalAmount,
    DateTime PlacedAt,
    string Notes
);

public sealed class UserDetailsWithOrdersResult
{
	public bool Success { get; init; }
	public string? Error { get; init; }
	public IReadOnlyList<UserDetailsWithOrdersResultSet1Result> Result { get; init; } = Array.Empty<UserDetailsWithOrdersResultSet1Result>();
	public IReadOnlyList<UserDetailsWithOrdersResultSet2Result> Result1 { get; init; } = Array.Empty<UserDetailsWithOrdersResultSet2Result>();
	
}

internal static partial class UserDetailsWithOrdersPlan
{
	private static ProcedureExecutionPlan? _cached;
	public static ProcedureExecutionPlan Instance => _cached ??= Create();
	private static ProcedureExecutionPlan Create()
	{

	var parameters = new ProcedureParameter[]
	{
            new("@UserId", System.Data.DbType.Int32, null, false, true),
        };

	var resultSets = new ResultSetMapping[]
	{
            new("ResultSet1", async (r, ct) =>
    {
		var list = new System.Collections.Generic.List<object>(); int o0=ReaderUtil.TryGetOrdinal(r, "UserId"); int o1=ReaderUtil.TryGetOrdinal(r, "DisplayName"); int o2=ReaderUtil.TryGetOrdinal(r, "Email"); int o3=ReaderUtil.TryGetOrdinal(r, "CreatedAt"); int o4=ReaderUtil.TryGetOrdinal(r, "Bio"); while (await r.ReadAsync(ct).ConfigureAwait(false)) { list.Add(new UserDetailsWithOrdersResultSet1Result(o0 < 0 ? default(int) : r.GetInt32(o0), o1 < 0 ? string.Empty : (r.IsDBNull(o1) ? string.Empty : r.GetString(o1)), o2 < 0 ? string.Empty : (r.IsDBNull(o2) ? string.Empty : r.GetString(o2)), o3 < 0 ? default(DateTime) : r.GetDateTime(o3), o4 < 0 ? string.Empty : (r.IsDBNull(o4) ? string.Empty : r.GetString(o4)))); } return list;
    }),

            new("ResultSet2", async (r, ct) =>
    {
		var list = new System.Collections.Generic.List<object>(); int o0=ReaderUtil.TryGetOrdinal(r, "OrderId"); int o1=ReaderUtil.TryGetOrdinal(r, "TotalAmount"); int o2=ReaderUtil.TryGetOrdinal(r, "PlacedAt"); int o3=ReaderUtil.TryGetOrdinal(r, "Notes"); while (await r.ReadAsync(ct).ConfigureAwait(false)) { list.Add(new UserDetailsWithOrdersResultSet2Result(o0 < 0 ? default(int) : r.GetInt32(o0), o1 < 0 ? default(decimal) : r.GetDecimal(o1), o2 < 0 ? default(DateTime) : r.GetDateTime(o2), o3 < 0 ? string.Empty : (r.IsDBNull(o3) ? string.Empty : r.GetString(o3)))); } return list;
    }),

        };

		object? OutputFactory(IReadOnlyDictionary<string, object?> values) => null;
		object AggregateFactory(bool success, string? error, object? output, IReadOnlyDictionary<string, object?> outputs, object[] rs)
		{
			return new UserDetailsWithOrdersResult
			{
				Success = success,
				Error = error,
				// ResultSet 0 → Result (robust list/array handling)
				Result = rs.Length > 0 && rs[0] is object[] rows0 ? Array.ConvertAll(rows0, o => (UserDetailsWithOrdersResultSet1Result)o).ToList() : (rs.Length > 0 && rs[0] is System.Collections.Generic.List<object> list0 ? Array.ConvertAll(list0.ToArray(), o => (UserDetailsWithOrdersResultSet1Result)o).ToList() : Array.Empty<UserDetailsWithOrdersResultSet1Result>()),
				// ResultSet 1 → Result1 (robust list/array handling)
				Result1 = rs.Length > 1 && rs[1] is object[] rows1 ? Array.ConvertAll(rows1, o => (UserDetailsWithOrdersResultSet2Result)o).ToList() : (rs.Length > 1 && rs[1] is System.Collections.Generic.List<object> list1 ? Array.ConvertAll(list1.ToArray(), o => (UserDetailsWithOrdersResultSet2Result)o).ToList() : Array.Empty<UserDetailsWithOrdersResultSet2Result>())
			};
		};
		void Binder(DbCommand cmd, object? state)
		{
            var input = (UserDetailsWithOrdersInput)state!;
            cmd.Parameters["@UserId"].Value = input.UserId;

		}
		return new ProcedureExecutionPlan(
			"[samples].[UserDetailsWithOrders]", parameters, resultSets, OutputFactory, AggregateFactory, Binder);
	}
}

/// <summary>Convenience extension for executing '[samples].[UserDetailsWithOrders]' via an <see cref="ISpocRDbContext"/>.</summary>
public static class UserDetailsWithOrdersExtensions
{
	public static async Task<UserDetailsWithOrdersResult> UserDetailsWithOrdersAsync(this ISpocRDbContext db, UserDetailsWithOrdersInput input, CancellationToken cancellationToken = default)
	{
		await using var conn = await db.OpenConnectionAsync(cancellationToken).ConfigureAwait(false);
		return await UserDetailsWithOrdersProcedure.ExecuteAsync(conn, input, cancellationToken).ConfigureAwait(false);
	}
}

/// <summary>Low-level execution wrapper for a single stored procedure invocation.</summary>
public static class UserDetailsWithOrdersProcedure
{
	public const string Name = "[samples].[UserDetailsWithOrders]";
	public static Task<UserDetailsWithOrdersResult> ExecuteAsync(DbConnection connection, UserDetailsWithOrdersInput input, CancellationToken cancellationToken = default)
	{
		return ProcedureExecutor.ExecuteAsync<UserDetailsWithOrdersResult>(connection, UserDetailsWithOrdersPlan.Instance, input, cancellationToken);
	}
}
