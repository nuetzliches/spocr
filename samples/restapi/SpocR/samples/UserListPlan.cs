// <auto-generated/>
// SpocR v4.5 Bridge Phase (vNext generator). Do not edit this file directly.
// Changes may be overwritten. For customization extend generated partials.
namespace RestApi.SpocR.Samples;

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Threading;
using System.Threading.Tasks;
using SpocR.SpocRVNext.Execution;
internal static partial class UserListProcedurePlan
{
    private static SpocR.SpocRVNext.Execution.ProcedureExecutionPlan? _cached;
    public static SpocR.SpocRVNext.Execution.ProcedureExecutionPlan Instance => _cached ??= Create();
    private static SpocR.SpocRVNext.Execution.ProcedureExecutionPlan Create()
    {
        var parameters = new SpocR.SpocRVNext.Execution.ProcedureParameter[] {
        };

        var resultSets = new SpocR.SpocRVNext.Execution.ResultSetMapping[] {
            new("ResultSet1", async (r, ct) => { var list = new System.Collections.Generic.List<object>(); int o0=r.GetOrdinal("UserId"); int o1=r.GetOrdinal("Email"); int o2=r.GetOrdinal("DisplayName"); int o3=r.GetOrdinal("CreatedAt"); int o4=r.GetOrdinal("Bio"); while (await r.ReadAsync(ct).ConfigureAwait(false)) { list.Add(new UserListResultSet1Row(r.GetInt32(o0), r.IsDBNull(o1) ? string.Empty : r.GetString(o1), r.IsDBNull(o2) ? string.Empty : r.GetString(o2), r.GetDateTime(o3), r.IsDBNull(o4) ? string.Empty : r.GetString(o4))); } return list; }),
        };

        object? OutputFactory(System.Collections.Generic.IReadOnlyDictionary<string, object?> values) => null;
        object AggregateFactory(bool success, string? error, object? output, System.Collections.Generic.IReadOnlyDictionary<string, object?> outputs, object[] rs) => new UserListResultAggregate { Success = success, Error = error, ResultSet1 = rs.Length > 0 ? System.Array.ConvertAll(rs[0].ToArray(), o => (UserListResultSet1Row)o).ToList() : System.Array.Empty<UserListResultSet1Row>() };

        void Binder(DbCommand cmd, object? state) { }
        return new SpocR.SpocRVNext.Execution.ProcedureExecutionPlan(
            "samples.UserList", parameters, resultSets, OutputFactory, AggregateFactory, Binder);
    }
}
