/// <summary>Auto-generated by SpocR. DO NOT EDIT. Changes will be overwritten on rebuild.</summary>
/// <remarks>Generated at 2025-10-13 15:36:25Z</remarks>
using System;
using System.Collections.Generic;
using System.Data;
using Microsoft.Data.SqlClient;
using System.Linq;
using System.Text.Json;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using RestApi.DataContext.Outputs;

namespace RestApi.DataContext;

public static class AppDbContextExtensions
{
    public static IAppDbContextPipe WithCommandTimeout(this IAppDbContext context, int commandTimeout)
    {
        return context.CreatePipe().WithCommandTimeout(commandTimeout);
    }

    public static IAppDbContextPipe WithTransaction(this IAppDbContext context, SqlTransaction transaction)
    {
        return context.CreatePipe().WithTransaction(transaction);
    }


    public static IAppDbContextPipe CreatePipe(this IAppDbContext context)
    {
        return new AppDbContextPipe(context).WithCommandTimeout(context.Options.CommandTimeout);
    }
}

public static class AppDbContextPipeExtensions
{
    public static IAppDbContextPipe WithCommandTimeout(this IAppDbContextPipe pipe, int commandTimeout)
    {
        pipe.CommandTimeout = commandTimeout;
        return pipe;
    }

    public static IAppDbContextPipe WithTransaction(this IAppDbContextPipe pipe, SqlTransaction transaction)
    {
        pipe.Transaction = transaction;
        return pipe;
    }


    public static async Task<TOutput> ExecuteAsync<TOutput>(this IAppDbContextPipe pipe, string procedureName, IEnumerable<SqlParameter> parameters, CancellationToken cancellationToken = default) where TOutput : class, IOutput, new()
    {
        var command = await pipe.CreateSqlCommandAsync(procedureName, parameters, cancellationToken);

        await command.ExecuteNonQueryAsync(cancellationToken);

        return parameters.ToOutput<TOutput>();
    }

    public static async Task<List<T>> ExecuteListAsync<T>(this IAppDbContextPipe pipe, string procedureName, IEnumerable<SqlParameter> parameters, CancellationToken cancellationToken = default) where T : class, new()
    {
        var command = await pipe.CreateSqlCommandAsync(procedureName, parameters, cancellationToken);

        var result = new List<T>();

        var reader = await command.ExecuteReaderAsync(cancellationToken);
        while (await reader.ReadAsync(cancellationToken)) result.Add(reader.ConvertToObject<T>());
        reader.Close();

        return result;
    }

    public static async Task<T> ExecuteSingleAsync<T>(this IAppDbContextPipe pipe, string procedureName, IEnumerable<SqlParameter> parameters, CancellationToken cancellationToken = default) where T : class, new()
    {
        return (await pipe.ExecuteListAsync<T>(procedureName, parameters, cancellationToken)).SingleOrDefault();
    }

    public static async Task<T> ExecuteScalarAsync<T>(this IAppDbContextPipe pipe, string procedureName, IEnumerable<SqlParameter> parameters, CancellationToken cancellationToken = default)
    {
        if (pipe == null) throw new ArgumentNullException(nameof(pipe));
        var command = await pipe.CreateSqlCommandAsync(procedureName, parameters, cancellationToken);
        var value = await command.ExecuteScalarAsync(cancellationToken);
        if (value == null || value == DBNull.Value) return default;
        if (value is T t) return t;
        try
        {
            var target = Nullable.GetUnderlyingType(typeof(T)) ?? typeof(T);
            return (T)Convert.ChangeType(value, target);
        }
        catch
        {
            return (T)value; // may throw later if incompatible
        }
    }

    public static async Task<string> ReadJsonAsync(this IAppDbContextPipe pipe, string procedureName, IEnumerable<SqlParameter> parameters, CancellationToken cancellationToken = default)
    {
        var command = await pipe.CreateSqlCommandAsync(procedureName, parameters, cancellationToken);

        var result = new StringBuilder();
        var reader = await command.ExecuteReaderAsync(cancellationToken);
        while (reader.Read()) result.Append(reader.GetValue(0).ToString());
        reader.Close();

        return result.ToString();
    }

    public static async Task<T> ReadJsonAsync<T>(this IAppDbContextPipe pipe, string procedureName, IEnumerable<SqlParameter> parameters, CancellationToken cancellationToken = default)
    {
        var json = await pipe.ReadJsonAsync(procedureName, parameters, cancellationToken);
        if (string.IsNullOrWhiteSpace(json)) return default;
        return JsonSerializer.Deserialize<T>(json);
    }

    /// <summary>
    /// Executes the stored procedure and deserializes the resulting JSON payload into T using either configured JsonSerializerOptions or a permissive default.
    /// </summary>
    public static async Task<T?> ReadJsonDeserializeAsync<T>(this IAppDbContextPipe pipe, string procedureName, IEnumerable<SqlParameter> parameters, CancellationToken cancellationToken = default)
    {
        var json = await pipe.ReadJsonAsync(procedureName, parameters, cancellationToken);
        if (string.IsNullOrWhiteSpace(json)) return default;
        var options = pipe.Context.Options.JsonSerializerOptions ?? new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
        return JsonSerializer.Deserialize<T>(json, options);
    }

    internal static async Task<SqlCommand> CreateSqlCommandAsync(this IAppDbContextPipe pipe, string procedureName, IEnumerable<SqlParameter> parameters, CancellationToken cancellationToken = default)
    {
        cancellationToken.ThrowIfCancellationRequested();

        if (pipe.Context.Connection.State != ConnectionState.Open) await pipe.Context.Connection.OpenAsync(cancellationToken);

        var command = new SqlCommand(procedureName, pipe.Context.Connection)
        {
            CommandType = CommandType.StoredProcedure,
            Transaction = pipe.GetCurrentTransaction()
        };

        if (pipe.CommandTimeout.HasValue)
        {
            command.CommandTimeout = pipe.CommandTimeout.Value;
        }

        if (parameters?.Any() ?? false)
        {
            command.Parameters.AddRange(parameters.ToArray());
        }

        return command;
    }

    internal static SqlTransaction GetCurrentTransaction(this IAppDbContextPipe pipe)
    {
        return pipe.Transaction ?? pipe.Context.Transactions.LastOrDefault();
    }

}
