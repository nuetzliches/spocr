using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis.Text;
using SpocR.CodeGenerators.Base;
using SpocR.CodeGenerators.Utils;
using SpocR.Contracts;
using SpocR.Managers;
using SpocR.Models;
using SpocR.Services;
using SpocR.Utils;

namespace SpocR.CodeGenerators.Models;

/// <summary>
/// Generates a consolidated CrudResult.cs (non-suffixed) once, mirroring the legacy CrudResult.base.cs pattern.
/// This aligns CrudResult handling with the Outputs (.base -> consolidated) approach.
/// </summary>
public class CrudResultGenerator(
    FileManager<ConfigurationModel> configFile,
    OutputService output,
    IConsoleService consoleService
) : GeneratorBase(configFile, output, consoleService)
{
    public async Task GenerateAsync(bool isDryRun)
    {
        try
        {
            var modelsRoot = DirectoryUtils.GetWorkingDirectory(ConfigFile.Config.Project.Output.DataContext.Path, ConfigFile.Config.Project.Output.DataContext.Models.Path);
            if (!Directory.Exists(modelsRoot) && !isDryRun)
            {
                Directory.CreateDirectory(modelsRoot);
            }
            var target = Path.Combine(modelsRoot, "CrudResult.cs");
            // Always (re)generate to ensure namespace stays in sync with configuration
            var ns = EnsureNamespace();
            await Output.WriteAsync(target, SourceText.From(GetSource(ns)), isDryRun);
            ConsoleService.Verbose("[CrudResult] Ensured CrudResult.cs (namespace: " + ns + ")");
        }
        catch (Exception ex)
        {
            ConsoleService.Warn($"[CrudResult] Failed to ensure CrudResult.cs: {ex.Message}");
        }
    }

    private string EnsureNamespace()
    {
        // Mirror behavior from other generators: <RootNamespace>.DataContext.Models
        var rootNs = ConfigFile.Config.Project.Output.Namespace?.Trim();
        if (string.IsNullOrWhiteSpace(rootNs)) rootNs = "Source"; // fallback
        return rootNs + ".DataContext.Models";
    }

    private static string GetSource(string ns) => "" +
        "// <auto-generated>\n" +
        "// Consolidated legacy CrudResult model (was CrudResult.base.cs).\n" +
        "// Will be removed in a future major version. Prefer OUTPUT DTOs.\n" +
        "using System;\n" +
        "using System.Text.Json.Serialization;\n" +
        $"namespace {ns};\n" +
        "[Obsolete(\"CrudResult is deprecated. Migrate to OUTPUT-based <ProcName>Output models.\")]\n" +
        "public partial class CrudResult : ICrudResult\n" +
        "{\n" +
        "    private bool? _succeeded;\n" +
        "    private bool? _modified;\n" +
        "    private bool? _hasDependencies;\n" +
        "    private bool? _alreadyExists;\n" +
        "    public CrudResult() { }\n" +
        "    public CrudResult(int resultId, int? recordId = null, long? rowVersion = null) { ResultId = resultId; RecordId = recordId; RowVersion = rowVersion; }\n" +
        "    public CrudResult(bool succeeded, bool? modified = false) { _succeeded = succeeded; _modified = modified; }\n" +
        "    [JsonIgnore(Condition = JsonIgnoreCondition.Never)] public bool Succeeded => _succeeded ?? (_succeeded = ResultId > 0) ?? false;\n" +
        "    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)] public bool Modified => _modified ?? (_modified = ResultId == -10) ?? false;\n" +
        "    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)] public bool HasDependencies => _hasDependencies ?? (_hasDependencies = ResultId == -11) ?? false;\n" +
        "    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)] public bool AlreadyExists => _alreadyExists ?? (_alreadyExists = ResultId == -12) ?? false;\n" +
        "    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public int? ResultId { get; set; }\n" +
        "    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public int? RecordId { get; set; }\n" +
        "    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)] public long? RowVersion { get; set; }\n" +
        "}\n" +
        "public interface ICrudResult\n" +
        "{\n" +
        "    bool Succeeded { get; }\n" +
        "    int? ResultId { get; }\n" +
        "    int? RecordId { get; }\n" +
        "    long? RowVersion { get; }\n" +
        "}\n";
}
