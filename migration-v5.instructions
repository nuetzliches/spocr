version: 1
updated: 2025-10-29
scope: spocr-v5-cutover

# SpocR v5 Migration Checklist (SnapshotBuilder & CLI)

## Environment Bootstrapping

1. Run `spocr init` in every repository that still relies on `spocr.json`.
2. Validate the generated `.env` contains the minimum generator keys:
   - `SPOCR_GENERATOR_DB`
   - `SPOCR_NAMESPACE` (only when auto namespace cannot infer the correct value)
   - `SPOCR_BUILD_SCHEMAS` or schema specific overrides when selective generation is required.
3. Remove secrets from `.env`; runtime connection strings now live in host configuration (`AddSpocRDbContext`).
4. Keep `SPOCR_GENERATOR_DB` (and related secrets) inside `.env`; the pull/build pipeline still relies on this value. Treat the file as sensitive (use repo-level secret handling) while runtime code fetches its connection string via `AddSpocRDbContext` and host configuration. Delete stale `spocr.json` files after mirroring the values; in the bridge phase keep a backup only when dual validation is ongoing.

## SnapshotBuilder Verification Flow

1. Execute a cold diagnostics pull to capture analyzer output (immer gegen die Sandbox `-p debug` arbeiten – dort lebt die v5-Ausgabe):
   ```cmd
   set SPOCR_LOG_LEVEL=debug
   dotnet run --project src\SpocR.csproj -- pull -p debug --no-cache --verbose
   ```
2. Repeat without `--no-cache` to confirm cache reuse does not drift types (weiterhin `-p debug`):
   ```cmd
   dotnet run --project src\SpocR.csproj -- pull -p debug --verbose
   ```
3. For procedure regressions, scope the run with `--procedure <schema.proc>` and archive:
   - `debug/test-summary.json`
   - `debug/.spocr/schema/<schema>.<proc>.json`
4. Inspect verbose logs for the structured tags documented in `src/SpocRVNext/SnapshotBuilder/README.md` (`[json-type-table]`, `[json-type-run-summary]`, `[proc-forward-expand]`). Capture a representative excerpt in the `Review-Findings` checklist.

## Telemetry & Monitoring

1. Export snapshot metrics by setting `SPOCR_SNAPSHOT_SUMMARY_PATH=debug/snapshot-summary.json` before each diagnostics pull.
2. Attach the summary file to CI artefacts so monitoring can ingest stage durations and JSON typing statistics.
3. Update the monitoring checklist whenever new fields appear in the summary payload.

## `FOR JSON` Fallback Audit

1. When procedures embed comments inside `FOR JSON` blocks, verify the generated snapshot still contains `Json.IsArray`/`Json.RootProperty`.
2. If ScriptDom misses metadata, confirm the textual fallback recorded the flag by checking the verbose trace (`[json-type-summary]`).
3. For nested `JSON_QUERY` projections, ensure the snapshot marks child columns with `ReturnsJson=true` and `Columns` entries; generator output should expose nested record structs or string placeholders as documented.
4. Escalate anomalies by logging the SQL definition, the verbose trace tail, and the affected snapshot file under `debug/.spocr/schema/`.

## Dual CLI Strategy

1. Ship a frozen v4 CLI as the NuGet tool `spocrv4`. It continues to read `spocr.json` and writes the legacy `DataContext/` output without touching the v5 pipeline.
2. Während der Bridge-Phase bleibt die moderne CLI unter dem Namen `spocr` aktiv und arbeitet ausschließlich mit `.env`/`SPOCR_*` Keys sowie den SnapshotBuilder-Artefakten.
3. Zum Cutover erfolgt der Umzug in das neue Repository `nuetzliches/xtraq`; die Nachfolge-CLI veröffentlicht dort als Tool/Package `xtraq` (Namespace `Xtraq`, Version `1.0.0`) ohne historische SpocR-Verweise. Das eingefrorene SpocR-Repository (v4.5) verweist in README/Changelog auf Xtraq.
4. `spocr` prüft weiterhin auf Legacy-Artefakte (z.B. `spocr.json`, `DataContext/`, `debug/spocr.json`) und verlinkt auf `MIGRATION_SpocRVNext.md`, diese Anleitung sowie – nach Cutover – direkt auf das Xtraq-Repository.
5. Kommuniziere in Release Notes, dass die Tools parallel installiert werden können und ergänze nach dem Cutover den Xtraq-Befehl:
   ```cmd
   dotnet tool install --global spocr    # Bridge CLI (v5)
   dotnet tool install --global spocrv4  # Frozen v4 pipeline
   dotnet tool install --global xtraq    # Nachfolger (Repository nuetzliches/xtraq)
   ```

## CLI Guardrails

1. Generator läuft ausschließlich im `next`-Modus; prüfe nach jedem Release, dass keine `SPOCR_GENERATOR_MODE`-Reste in Samples, Debug-Verzeichnissen oder Dokumentation verbleiben.
2. Document warning behaviour (legacy artefact detection) in the CLI help and README so users understand why `spocr` references the migration docs.
3. Communicate breaking changes by updating:
   - `docs/content/3.reference/json-procedures.md`
   - `src/SpocRVNext/SnapshotBuilder/README.md`
   - `CHANGELOG.md`
4. Before removing legacy outputs, rerun the diagnostics suite above and refresh golden assets (`write-golden`, `verify-golden`).
5. Plane einen Abschluss-PR, der README, CHANGELOG und Auto-Updater-Meldungen von SpocR (v4.5) auf das Xtraq-Projekt verweist.

Document evidence for each step in `CHECKLIST.md` and keep this file synchronised whenever the migration process evolves.
