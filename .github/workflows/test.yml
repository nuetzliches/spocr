name: SpocR Test Suite

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

env:
  DOTNET_VERSION: "9.0.x"
  DOTNET_SECONDARY_VERSION: "8.0.x"

jobs:
  test:
    name: Test on ${{ matrix.os }} with .NET ${{ matrix.dotnet-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        dotnet-version: ["8.0.x", "9.0.x"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker (for Testcontainers)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo systemctl start docker
          sudo docker info

      - name: Setup .NET ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Restore dependencies
        run: dotnet restore src/SpocR.sln

      - name: Build solution
        run: dotnet build src/SpocR.sln --no-restore --configuration Release

      - name: Run Unit Tests
        run: dotnet test src/SpocR.Tests --no-build --configuration Release --logger trx --results-directory TestResults

      - name: Run Integration Tests
        run: dotnet test src/SpocR.IntegrationTests --no-build --configuration Release --logger trx --results-directory TestResults
        env:
          # Testcontainers requires Docker socket access
          DOCKER_HOST: ${{ matrix.os == 'windows-latest' && 'npipe://./pipe/docker_engine' || 'unix:///var/run/docker.sock' }}

      - name: Run SpocR Self-Tests
        run: |
          dotnet run --project src/SpocR --configuration Release -- test --ci --output TestResults/spocr-tests.xml
        continue-on-error: true

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.dotnet-version }}
          path: TestResults/

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore src/SpocR.sln

      - name: Run Tests with Coverage
        run: |
          dotnet test src/SpocR.Tests \
            --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults
            
          dotnet test src/SpocR.IntegrationTests \
            --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults

      - name: Generate Coverage Report
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator \
            -reports:"./TestResults/**/coverage.cobertura.xml" \
            -targetdir:"./CoverageReport" \
            -reporttypes:"Html;Badges"

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: ./TestResults
          fail_ci_if_error: false

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: CoverageReport/

  quality:
    name: Code Quality & Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore src/SpocR.sln

      - name: Run Code Analysis
        run: dotnet build src/SpocR.sln --configuration Release --verbosity normal

      - name: Run SpocR Validation Tests
        run: |
          dotnet run --project src/SpocR --configuration Release -- test --validate

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore src/SpocR.sln

      - name: Build solution
        run: dotnet build src/SpocR.sln --configuration Release --no-restore

      - name: Run Benchmarks
        run: |
          dotnet run --project src/SpocR --configuration Release -- test --benchmark
        continue-on-error: true

      - name: Upload Benchmark Results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: BenchmarkDotNet.Artifacts/
